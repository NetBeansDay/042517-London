/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gre.module3;

import java.util.Timer;
import java.util.TimerTask;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.gre.module3//TimeGre//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TimeGreTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "org.gre.module3.TimeGreTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TimeGreAction",
        preferredID = "TimeGreTopComponent"
)
@Messages({
    "CTL_TimeGreAction=TimeGre",
    "CTL_TimeGreTopComponent=TimeGre Window",
    "HINT_TimeGreTopComponent=This is a TimeGre window"
})
public final class TimeGreTopComponent extends TopComponent {
    Timer timer;
    int seconds = 0;
    TimerTask task;
    
    int pomodoro = 1500000;
    Timer pomTime;
    TimerTask pomTask;
    int turn = 1;
    
    public TimeGreTopComponent() {
        initComponents();
        new Thread() {
            @Override
            public void run() {
                while (true) {
                    clockLabel.setText(msToTime(System.currentTimeMillis() + 3600000));
                }
            }
        }.start();
        timerLabel.setText(msToTime(seconds));
        pomoLabel.setText(msToTime(pomodoro));
        setName(Bundle.CTL_TimeGreTopComponent());
        setToolTipText(Bundle.HINT_TimeGreTopComponent());

    }
    
    private String msToTime(long ms) {
        long milis = (ms /100) % 60;
        long second = (ms /1000) % 60;
        long minute = (ms / 60000) % 60;
        long hour = (ms / 3600000) % 24;
        
//        return hour + ":" + minute + ":" + second + ":" + milis;
        return String.format("%02d:%02d:%02d:%02d", hour, minute, second, milis);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clockLabel = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        timerStart = new javax.swing.JButton();
        timerRestart = new javax.swing.JButton();
        pomoLabel = new javax.swing.JLabel();
        pomoStart = new javax.swing.JButton();
        pomoRestart = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(clockLabel, org.openide.util.NbBundle.getMessage(TimeGreTopComponent.class, "TimeGreTopComponent.clockLabel.text")); // NOI18N

        timerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(timerLabel, org.openide.util.NbBundle.getMessage(TimeGreTopComponent.class, "TimeGreTopComponent.timerLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(timerStart, org.openide.util.NbBundle.getMessage(TimeGreTopComponent.class, "TimeGreTopComponent.timerStart.text")); // NOI18N
        timerStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerStartActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(timerRestart, org.openide.util.NbBundle.getMessage(TimeGreTopComponent.class, "TimeGreTopComponent.timerRestart.text")); // NOI18N
        timerRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerRestartActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(pomoLabel, org.openide.util.NbBundle.getMessage(TimeGreTopComponent.class, "TimeGreTopComponent.pomoLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(pomoStart, org.openide.util.NbBundle.getMessage(TimeGreTopComponent.class, "TimeGreTopComponent.pomoStart.text")); // NOI18N
        pomoStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pomoStartActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(pomoRestart, org.openide.util.NbBundle.getMessage(TimeGreTopComponent.class, "TimeGreTopComponent.pomoRestart.text")); // NOI18N
        pomoRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pomoRestartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(clockLabel)
                .addGap(66, 66, 66)
                .addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(timerStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(timerRestart)
                .addGap(18, 18, 18)
                .addComponent(pomoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pomoStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pomoRestart)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timerRestart)
                    .addComponent(timerStart)
                    .addComponent(timerLabel)
                    .addComponent(clockLabel)
                    .addComponent(pomoLabel)
                    .addComponent(pomoStart)
                    .addComponent(pomoRestart))
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void timerStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerStartActionPerformed
        if (evt.getActionCommand().equals("Start")) {
            timer = new Timer();
            task = new TimerTask() {
        @Override
        public void run() {
            seconds ++;
            timerLabel.setText(msToTime(seconds));
        }
    };
            timer.scheduleAtFixedRate(task, 0, 1);
            timerStart.setText("Stop");
        } else {
            timer.cancel();
            timerStart.setText("Start");
        }
    }//GEN-LAST:event_timerStartActionPerformed

    private void timerRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerRestartActionPerformed
        seconds = 0;
        timerLabel.setText(msToTime(seconds));
    }//GEN-LAST:event_timerRestartActionPerformed

    private void pomoStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pomoStartActionPerformed
        if (evt.getActionCommand().equals("Start")) {
            pomTime = new Timer();
            pomTask = new TimerTask() {
                @Override
                public void run() {
                    pomodoro-=75;
                    if (pomodoro == 0) {
                        turn++;
                        if (turn % 6 == 0) {
                            pomodoro = 900000;
                        } else if (turn % 2 == 0) {
                            pomodoro = 300000;
                        } else {
                            pomodoro = 1500000;
                        }
                        pomTime.cancel();
                        pomoStart.setText("Start");
                    }
                    pomoLabel.setText(msToTime(pomodoro));
                }
            };
            pomTime.scheduleAtFixedRate(pomTask, 0, 1);
            pomoStart.setText("Pause");

        } else {
            pomTime.cancel();
            pomoStart.setText("Start");
        }
    }//GEN-LAST:event_pomoStartActionPerformed

    private void pomoRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pomoRestartActionPerformed
       pomodoro = 1500000;
       turn = 1;
    }//GEN-LAST:event_pomoRestartActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clockLabel;
    private javax.swing.JLabel pomoLabel;
    private javax.swing.JButton pomoRestart;
    private javax.swing.JButton pomoStart;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JButton timerRestart;
    private javax.swing.JButton timerStart;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
